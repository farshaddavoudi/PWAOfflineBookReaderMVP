@page "/"
@using TestOfflineBookReader.Client.IndexedDB
@using TestOfflineBookReader.Shared
@using System.Text.Json.Serialization
@using System.Text.Json
@inject BookDataIndexedDb BookDataIndexedDb
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<h1>Hello, world!</h1>

Welcome to your new app.

<div class="row">
    <div class="col-md-4">
        <h4>Online Status Indicator </h4>
    </div>
    <div class="col-md-4">
        <OnlineStatusIndicator />
    </div>
</div>

<div> Total size: @(Books.Sum(b => b.Size) / 1000000) MB</div>

@if (Books.Count != 0)
{
    <div class="row">
        @foreach (var book in Books)
        {
            <div @key="@book.BookId" class="col-md-4" style="margin-bottom: 20px;">
                <div>
                    <span>@book.Name</span>
                    <span>(@(book.Size / 1000) KB)</span>
                    <button @onclick="@(() => Download(book.BookId))"> دانلود </button>
                </div>
            </div>
        }
    </div>
} 


@code{
    private List<Book> Books { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await BookDataIndexedDb.OpenIndexedDb();

        Books = await BookDataIndexedDb.GetAll<Book>(nameof(Book));

        Console.WriteLine(JsonSerializer.Serialize(Books));

        await base.OnInitializedAsync();
    }

    private async Task Download(Guid bookBookId)
    {
        var url = $"viewer/{bookBookId}";
        //await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        navigationManager.NavigateTo(url);
    }

}